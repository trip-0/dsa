#include <stdio.h> 
#include <malloc.h> 
#include <stdlib.h> 
 
struct node 
{ 
    int info; 
    struct node *le ; 
    struct node *right; 
};typedef struct node * NODE; 
 
NODE insert(NODE root) 
{ 
    NODE newNode,prev,pres; 
 
    newNode = (NODE)malloc(sizeof(struct node)); 
 
    printf("Enter the data for new node\n"); 
    scanf("%d",&newNode->info); 
     
    newNode->le = newNode->right=NULL; 
 
    if(root==NULL) 
     
    { 
        root=newNode; 
        return root; 
    } 
    prev=NULL; 
    pres=root; 
     
    while(pres!=NULL) 
    { 
        prev = pres; 
        if(newNode->info > pres->info) 
        pres=pres->right; 
        else if(newNode->info < pres->info) 
        pres=pres->le ; 
    } 
    if(newNode->info > prev->info) 
    prev->right = newNode; 
    else 
    prev->le =newNode; 
         
    return root; 
} 
 
void postorder(NODE root) 
{ 
    if(root!=NULL) 
    { 
        postorder(root->le ); 
        postorder(root->right); 
        printf ("%d\t",root->info); 
    } 
} 
 
void preorder(NODE root) 
{ 
    if(root!=NULL) 
    { 
        printf ("%d\t",root->info); 
        preorder(root->le ); 
        preorder(root->right);       
    } 
} 
 
void inorder(NODE root) 
{ 
    if(root!=NULL) 
    { 
        inorder(root->le ); 
        printf ("%d\t",root->info); 
        inorder(root->right);        
    } 
} 
 
NODE search(NODE root, int value) 
{ 
    while (root != NULL) 
    { 
        if (value == root->info) 
            return root;  
        else if (value < root->info) 
            root = root->le ; 
        else 
            root = root->right;  
    } 
    return NULL; 
} 
 
 
int main() 
{ 
    NODE root = NULL; 
    int ch,value; 
    for(;;) 
    { 
        printf("\n1.Insert 2.Preorder 3.Inorder 4.Postorder 5.Search\n"); 
        scanf("%d",&ch); 
        switch(ch) 
        { 
            case 1:root = insert(root); 
                break; 
            case 2: if(root==NULL) 
                    printf ("Empty Tree"); 
                    else 
                    preorder(root); 
                break; 
            case 3: if(root==NULL) 
                    printf ("Empty Tree"); 
                    else 
                    inorder(root); 
                break; 
            case 4: if(root==NULL) 
                    printf ("Empty Tree"); 
                    else 
                    postorder(root); 
                break; 
            case 5: 
                printf ("Enter value to search: "); 
                scanf("%d", &value); 
                NODE foundNode = search(root, value); 
                if (foundNode != NULL) 
                    printf ("Value %d found in the tree.\n", value); 
                else 
                    printf ("Value %d not found in the tree.\n", value); 
                break; 
            default: exit(0); 
        } 
    } 
    return 0; 
} 
